(window.webpackJsonp=window.webpackJsonp||[]).push([[119],{466:function(s,a,t){"use strict";t.r(a);var e=t(15),n=Object(e.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h3",{attrs:{id:"说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#说明"}},[s._v("#")]),s._v(" 说明")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# 设计模式\nhttps://refactoringguru.cn/design-patterns/proxy/python/example\nhttps://mp.weixin.qq.com/s/rcGwD306aZaXThVMm53t_A\n\n# 文档和代码\nhttps://shusheng007.top/2021/09/07/design-pattern/\nhttps://github.com/shusheng007/design-patterns\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h3",{attrs:{id:"uml类图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#uml类图"}},[s._v("#")]),s._v(" UML类图")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# uml图六种箭头的含义（泛化、实现、依赖、关联、聚合、组合）\nhttps://blog.csdn.net/qq_20936333/article/details/86773664\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h4",{attrs:{id:"泛化-继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#泛化-继承"}},[s._v("#")]),s._v(" 泛化（继承）")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://obsidian-foveagge.oss-cn-beijing.aliyuncs.com/blog/0dn9dx.png",alt:""}})]),s._v(" "),a("h4",{attrs:{id:"实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现"}},[s._v("#")]),s._v(" 实现")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://obsidian-foveagge.oss-cn-beijing.aliyuncs.com/blog/MD33vU.png",alt:""}})]),s._v(" "),a("h4",{attrs:{id:"依赖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#依赖"}},[s._v("#")]),s._v(" 依赖")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://obsidian-foveagge.oss-cn-beijing.aliyuncs.com/blog/Bzb6kL.png",alt:""}})]),s._v(" "),a("h4",{attrs:{id:"关联"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关联"}},[s._v("#")]),s._v(" 关联")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://obsidian-foveagge.oss-cn-beijing.aliyuncs.com/blog/1dsUw2.png",alt:""}})]),s._v(" "),a("h4",{attrs:{id:"组合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组合"}},[s._v("#")]),s._v(" 组合")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://obsidian-foveagge.oss-cn-beijing.aliyuncs.com/blog/SBnMyc.png",alt:""}})]),s._v(" "),a("h4",{attrs:{id:"聚合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#聚合"}},[s._v("#")]),s._v(" 聚合")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://obsidian-foveagge.oss-cn-beijing.aliyuncs.com/blog/oK3x46.png",alt:""}})]),s._v(" "),a("h3",{attrs:{id:"基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础"}},[s._v("#")]),s._v(" 基础")]),s._v(" "),a("h4",{attrs:{id:"接口和抽象类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接口和抽象类"}},[s._v("#")]),s._v(" 接口和抽象类")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("接口用于定义类之间的契约，强调类所能做的事情\n而抽象类用于作为其他类的基类，提供一些通用的实现和属性  (一个集合  eg. 奔驰)\n\n抽象类通常定义一组或者一个类型的集合，例如奔驰可以定义一个抽象类  \n\t1. 父类定义的抽象方法 子类必须实现\n\t2. 不能被实例化\n\t3. 一个类只能继承一个抽象父类\n\t4. 抽象类只能用于其他类的父类\n接口：往往是定义通用的方法    例如上面的抽象类可以集成接口 来实现统一的行为\n\t1. 一个类可以实现多个接口\n\t2. java使用其进行多继承\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("h3",{attrs:{id:"_23种设计模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_23种设计模式"}},[s._v("#")]),s._v(" 23种设计模式")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("注意组合和继承\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://obsidian-foveagge.oss-cn-beijing.aliyuncs.com/blog/7D6aZ5.png",alt:""}}),s._v(" "),a("img",{attrs:{src:"https://obsidian-foveagge.oss-cn-beijing.aliyuncs.com/blog/4gP545.png",alt:""}})]),s._v(" "),a("h3",{attrs:{id:"行为型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#行为型"}},[s._v("#")]),s._v(" 行为型")]),s._v(" "),a("h4",{attrs:{id:"策略模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#策略模式"}},[s._v("#")]),s._v(" 策略模式")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("1. 策略模式通常需要确定一个接口，具体的策略类需要重写改方法\n2. 定义一个对象集合包装这些类\n\n定义一个算法的系列，将其各个分装，并且使他们有交互性\n策略模式使得算法在用户使用的时候能独立的改变\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h4",{attrs:{id:"迭代器模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#迭代器模式"}},[s._v("#")]),s._v(" 迭代器模式")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("提供一种方法顺序访问一个聚合对象中各个元素, 而又不需暴露该对象的内部表示\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"结构型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结构型"}},[s._v("#")]),s._v(" 结构型")]),s._v(" "),a("h4",{attrs:{id:"代理模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代理模式"}},[s._v("#")]),s._v(" 代理模式")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("为其他对象提供一个代理以控制对这个对象的访问\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h4",{attrs:{id:"桥接模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#桥接模式"}},[s._v("#")]),s._v(" 桥接模式")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("将一个抽象与实现解耦，以便两者可以独立的变化\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h4",{attrs:{id:"装饰器模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#装饰器模式"}},[s._v("#")]),s._v(" 装饰器模式")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# AOP实现  扩展类的功能\n向某个对象动态地添加更多的功能\n修饰模式是除类继承外另一种扩展功能的方法\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"创建型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建型"}},[s._v("#")]),s._v(" 创建型")]),s._v(" "),a("h4",{attrs:{id:"简单工厂"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简单工厂"}},[s._v("#")]),s._v(" 简单工厂")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("即 根据传入的参数 进行动态的选择对象  可以看成是一个对象池\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h4",{attrs:{id:"抽象工厂"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#抽象工厂"}},[s._v("#")]),s._v(" 抽象工厂")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# 产品族概念\n为一个产品族提供了统一的创建接口\n当需要这个产品族的某一系列的时候，可以从抽象工厂中选出相应的系列创建一个具体的工厂类\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h4",{attrs:{id:"工厂方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#工厂方法"}},[s._v("#")]),s._v(" 工厂方法")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("定义一个接口用于创建对象，但是让子类决定初始化哪个类\n工厂方法把一个类的初始化下放到子类\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h4",{attrs:{id:"建造者-生成器-模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#建造者-生成器-模式"}},[s._v("#")]),s._v(" 建造者（生成器）模式")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])])}),[],!1,null,null,null);a.default=n.exports}}]);