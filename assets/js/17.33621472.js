(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{365:function(a,s,e){"use strict";e.r(s);var t=e(15),n=Object(t.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("blockquote",[s("p",[a._v("在软件开发过程中，我们应该尽量遵循下面的六大原则, 从而保证我们开发软件的健壮性。")])]),a._v(" "),s("h2",{attrs:{id:"开闭原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#开闭原则"}},[a._v("#")]),a._v(" 开闭原则")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("# 开闭原则(Open-Closed Principle, OCP)  \n一个软件实体应当对扩展开放，对修改关闭。即软件实体应尽量在不修改原有代码的情况下进行扩展。  \n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("h2",{attrs:{id:"里氏代换原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#里氏代换原则"}},[a._v("#")]),a._v(" 里氏代换原则")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("# 里氏代换原则(Liskov Substitution Principle, LSP)  \n所有引用基类（父类）的地方必须能透明地使用其子类的对象（即面向抽象/接口编程） \n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("h2",{attrs:{id:"单一职责"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单一职责"}},[a._v("#")]),a._v(" 单一职责")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("# 单一职责（Single Responsibility Principle, SRP）  \n一个类应该只负责一个职责  \n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("h2",{attrs:{id:"依赖倒置原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#依赖倒置原则"}},[a._v("#")]),a._v(" 依赖倒置原则")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("# 依赖倒置原则（Dependence Inversion Principle, DIP）  \n抽象不应该依赖于细节，细节应当依赖于抽象  \n调用类不应依赖具体的实现类，而是依赖具体的抽象（就是使用接口或者抽象类进行一步抽离）  \n高层模块和低层模块都应该依赖于抽象，抽象不应该依赖于具体的实现。  \n抽象：java中的抽象类或者接口  \n细节：java中的具体实现类  \n高层模块：java中的调用类  \n低层模块：java中的实现类  \n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br")])]),s("h2",{attrs:{id:"迪米特原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#迪米特原则"}},[a._v("#")]),a._v(" 迪米特原则")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("# 迪米特原则（Least Knowledge Principle, LKP）  \n门面模式  \n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("h2",{attrs:{id:"接口隔离原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#接口隔离原则"}},[a._v("#")]),a._v(" 接口隔离原则")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("# 接口隔离原则（Interface Segregation Principle, ISP）  \n接口最小化，可以实现多个小的接口，而不是一个大的汇总接口\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("h2",{attrs:{id:"参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[a._v("#")]),a._v(" 参考")]),a._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://shusheng007.top/2020/02/15/%e9%9d%a2%e5%90%91%e5%af%b9%e8%b1%a1%e8%ae%be%e8%ae%a1%e4%b9%8b%e9%ad%82%e7%9a%84%e5%85%ad%e5%a4%a7%e5%8e%9f%e5%88%99/",target:"_blank",rel:"noopener noreferrer"}},[a._v("面向对象设计之魂的六大原则 "),s("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=n.exports}}]);